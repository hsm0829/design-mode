###设计模式：装配者  （开放-关闭原则）

    ##四种角色
      1、Component ： 核心抽象类，装饰者和被装饰者，都要继承这个抽象类
      2、ConcreteComponent : 被装饰的对象，该类必须继承Component
      3、Decorator：装饰者抽象类，抽象出具体装饰者需要装饰的接口
      4、ConcreteDecorator：具体的装饰者，该类必须继承Decorator类，并且里面有一个变量指向Component抽象类




    ## 以黄焖鸡米饭结算系统为例，分析如何设计四种角色？

        ## 1、Component ： 核心抽象类，关键在于“核心”。

                结算系统的核心：结果菜单、结果价格


        ## 2、ConcreteComponent ： 被装饰的对象：黄焖鸡米饭

                菜单=黄焖鸡米饭
                价格=16

        ## 3、Decorator ：装饰者（装饰黄焖鸡米饭，就是在黄焖鸡米饭的基础上，加配菜） 一般抽象类

                装饰者需要的接口

        ## 4、ConcreteDecorator：具体的装饰者（具体配菜信息）

                实现装饰接口，在Component核心基础上，开始装饰

    ## 示意图：

         被装饰者：黄焖鸡米饭16元                             （被装饰者：黄焖鸡米饭16元 ）
              |-- 第一层装饰：鸡蛋 2元                        （被装饰者：黄焖鸡米饭16元 + 第一层装饰：鸡蛋 2元）
                      |-- 第二层装饰：土豆 2元                （被装饰者：黄焖鸡米饭16元 + 第一层装饰：鸡蛋 2元 + 第二层装饰：土豆 2元）
                              |-- 第三层装饰：蔬菜 2元        （被装饰者：黄焖鸡米饭16元 + 第一层装饰：鸡蛋 2元 + 第二层装饰：土豆 2元 + 第三层装饰：蔬菜 2元  ）


####### 策略模式

       #### 组成：
            1. 环境类（Context）：提供一个环境，用一个ConcreteStrategy对象来配置，维护一个对Strategy对象的引用，访问它的数据。
            2. 抽象策略类（Strategy）：定义支持所有算法的公共接口，Context使用这个接口来调用某个ConcreteStrategy实现方法。
            3. 具体策略类（ConcreteStrategy）：以Strategy接口实现某具体算法

       ### 案例：
            爸爸给小明报了三个补习课，根据不同的时间，选择上不同的课程。三个补习课（具体策略类）、补课（环境类）、小明（调用者）



